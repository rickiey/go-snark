// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package windowpost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WindowGrpcClient is the client API for WindowGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WindowGrpcClient interface {
	RegisterWorker(ctx context.Context, in *WindowWorkerRequest, opts ...grpc.CallOption) (*WindowWorkerResponse, error)
	AllocateTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
}

type windowGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewWindowGrpcClient(cc grpc.ClientConnInterface) WindowGrpcClient {
	return &windowGrpcClient{cc}
}

func (c *windowGrpcClient) RegisterWorker(ctx context.Context, in *WindowWorkerRequest, opts ...grpc.CallOption) (*WindowWorkerResponse, error) {
	out := new(WindowWorkerResponse)
	err := c.cc.Invoke(ctx, "/windowpost.WindowGrpc/RegisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *windowGrpcClient) AllocateTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/windowpost.WindowGrpc/AllocateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *windowGrpcClient) HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := c.cc.Invoke(ctx, "/windowpost.WindowGrpc/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WindowGrpcServer is the server API for WindowGrpc service.
// All implementations must embed UnimplementedWindowGrpcServer
// for forward compatibility
type WindowGrpcServer interface {
	RegisterWorker(context.Context, *WindowWorkerRequest) (*WindowWorkerResponse, error)
	AllocateTask(context.Context, *TaskRequest) (*TaskResponse, error)
	HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
	mustEmbedUnimplementedWindowGrpcServer()
}

// UnimplementedWindowGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedWindowGrpcServer struct {
}

func (UnimplementedWindowGrpcServer) RegisterWorker(context.Context, *WindowWorkerRequest) (*WindowWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedWindowGrpcServer) AllocateTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateTask not implemented")
}
func (UnimplementedWindowGrpcServer) HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedWindowGrpcServer) mustEmbedUnimplementedWindowGrpcServer() {}

// UnsafeWindowGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WindowGrpcServer will
// result in compilation errors.
type UnsafeWindowGrpcServer interface {
	mustEmbedUnimplementedWindowGrpcServer()
}

func RegisterWindowGrpcServer(s grpc.ServiceRegistrar, srv WindowGrpcServer) {
	s.RegisterService(&WindowGrpc_ServiceDesc, srv)
}

func _WindowGrpc_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindowGrpcServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/windowpost.WindowGrpc/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindowGrpcServer).RegisterWorker(ctx, req.(*WindowWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WindowGrpc_AllocateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindowGrpcServer).AllocateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/windowpost.WindowGrpc/AllocateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindowGrpcServer).AllocateTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WindowGrpc_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindowGrpcServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/windowpost.WindowGrpc/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindowGrpcServer).HeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WindowGrpc_ServiceDesc is the grpc.ServiceDesc for WindowGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WindowGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "windowpost.WindowGrpc",
	HandlerType: (*WindowGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorker",
			Handler:    _WindowGrpc_RegisterWorker_Handler,
		},
		{
			MethodName: "AllocateTask",
			Handler:    _WindowGrpc_AllocateTask_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _WindowGrpc_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "window.proto",
}
